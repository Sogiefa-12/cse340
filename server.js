/* ******************************************
 * This server.js file is the primary file of the 
 * application. It is used to control the project.
 *******************************************/
/* ***********************
 * Require Statements
 *************************/
const express = require("express")
const router = new express.Router()
const invController = require("./controllers/invController")
const utilities = require("..utils/utilities")
const { connectToDb, handleErrors} = require('./utils/utilities');
const invValidate = require("../utils/inventory-validation")


/* ***********************
 * View Engine and Templates
 *************************/
app.set("view engine", "ejs")
app.use(expressLayouts)
app.set("layout", "./layouts/layout") // not at views root
app.set("layout", path.join(__dirname, "views", "layouts", "layout.ejs"));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
// Connect to database
const db = connectToDb();

const title = 'CSE 340 App'
app.use((req, res, next) => {
  res.locals.title = title
  next()
})
/* ***********************
 * Routes
 *************************/
app.use(static)
app.use('/inv', router);
// Index route
// app.get('/', baseController.buildHome)
app.get("/", function(req, res){
  res.render("index", {title: "Home"})
})

// Route to vehicle management page
router.get('/', utilities.checkLogin, utilities.checkUserLevel, utilities.handleErrors(invController.showManagementPage));

// Route to build inventory by classification view
router.get(
  "/type/:classificationId",
  utilities.handleErrors(invController.buildByClassificationId)
)

//Route to vehicle detail page
router.get(
  "/detail/:invId",
  utilities.handleErrors(invController.buildByVehicleId)
)

 /* ***********************
* Express Error Handler
* Place after all other middleware
*************************/
// Handle errors
app.use(async (err, req, res, next) => {
  console.error(`Error at: "${req.originalUrl}": ${err.message}`);
  if (err.status == 404) {
    message = err.message;
  } else {
    message = "Oh no! There was a crash. Maybe try a different route?";
  }
  const nav = utils.getNav();
  res.render("errors/error", {
    title: err.status || "Server Error",
    message,
    nav
  });
});

// Configure error handler for Express application
app.use(function(err, req, res, next) {
  // If error was generated by footer-based error link
if(err.message === 'Error generated') {
    res.status(500).render('error', {
      title: 'Error Occurred',
      message: 'An error has occurred. Please try again later.'
    });
  } else {
  res.status(500).render('error', {
  title: 'Oops, something went wrong!',
  message: err.message
  });
  }
  });

/* ***********************
 * Local Server Information
 * Values from .env (environment) file
 *************************/
const port = process.env.PORT
const host = process.env.HOST

/* ***********************
 * Log statement to confirm server operation
 *************************/
app.listen(port, () => {
  console.log(`app listening on ${host}:${port}`)
})

app.use(utils.handleErrors);
// File Not found Route - must be last route
app.use(async (req, res, next) => {
  next({status: 404, message: 'Sorry, we appear to have lost that page.'})
})

