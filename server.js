/* ******************************************
 * This server.js file is the primary file of the 
 * application. It is used to control the project.
 *******************************************/
/* ***********************
 * Require Statements
 *************************/
const express = require("express");

const ejs = require("ejs");
const app = express();
const expressLayouts =
require("express-ejs-layouts")
const env = require("dotenv").config()
const static = require("./routes/static");
const utils= require("./utils/index");
const path = require("path");
const baseController = require("./controllers/baseController");
const vehicleController = require("./controllers/vehicleController");
const formController = require("./controllers/formController");
const errorController = require("./controllers/errorController");
const router = require('./utils/index').router;
const {handleErrors} = utils
app.use(vehicleController.all());
app.use(bodyParser.urlencoded({ extended: true }))




/* ***********************
 * View Engine and Templates
 *************************/
app.set("view engine", "ejs")
app.use(expressLayouts)
// app.set("layout", "./layouts/layout") // not at views root
app.set("layout", path.join(__dirname, "views", "layouts", "layout.ejs"));

// app.set("views", path.join(__dirname, "."));

const title = 'CSE 340 App'
app.use((req, res, next) => {
  res.locals.title = title
  next()
})
/* ***********************
 * Routes
 *************************/
app.use(static)
app.use(router);
// Index route
// app.get('/', baseController.buildHome)
app.get("/", function(req, res){
  res.render("index", {title: "Home"})
})
app.get('/sedan', vehicleController.sedan);
app.get('/suv', vehicleController.suv);
app.get('/truck', vehicleController.truck);


app.post("/vehicles", formController.vehiclesUpdate);

//app.get('/generate-error', errorController.generateError)

// Delete vehicle route
app.get('/vehicles/delete/:id', (req, res) => {
  const vehicleId = req.params.id
vehicleController.delete(vehicleId)
    .then(() => {
      res.redirect("/vehicles")
    })
    .catch((err) => {
      console.error(err)
      
  res.status(500).render('error', {
      title: 'Oops, something went wrong!',
      message: "An error has occurred. Please try again later."
    });
  });
});


// app.use(utils.handleErrors);
// // File Not found Route - must be last route
// app.use(async (req, res, next) => {
//   next({status: 404, message: 'Sorry, we appear to have lost that page.'})
// })

 /* ***********************
* Express Error Handler
* Place after all other middleware
*************************/

// Handle errors
app.use(async (err, req, res, next) => {
  console.error(`Error at: "${req.originalUrl}": ${err.message}`);
  if (err.status == 404) {
    message = err.message;
  } else {
    message = "Oh no! There was a crash. Maybe try a different route?";
  }
  const nav = await utils;
  res.render("errors/error", {
    title: err.status || "Server Error",
    message,
    nav
  });
});

// Configure error handler for Express application
app.use(function(err, req, res, next) {
  // If error was generated by footer-based error link
if(err.message === 'Error generated') {
    res.status(500).render('error', {
      title: 'Error Occurred',
      message: 'An error has occurred. Please try again later.'
    });
  } else {
  res.status(500).render('error', {
  title: 'Oops, something went wrong!',
  message: err.message
  });
  }
  });


  /* *
/* ***********************
 * Local Server Information
 * Values from .env (environment) file
 *************************/
const port = process.env.PORT
const host = process.env.HOST

/* ***********************
 * Log statement to confirm server operation
 *************************/
app.listen(port, () => {
  console.log(`app listening on ${host}:${port}`)
})

app.use(utils.handleErrors);
// File Not found Route - must be last route
app.use(async (req, res, next) => {
  next({status: 404, message: 'Sorry, we appear to have lost that page.'})
})

